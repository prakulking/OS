#include <stdio.h>
#include <pthread.h>

void *thread_function(void *arg) {
    int thread_id = *(int *)arg;
    printf("Thread %d is running\n", thread_id);
    pthread_exit(NULL);
}

int main() {
    pthread_t thread;
    int thread_id = 1;

    // Create a thread
    if (pthread_create(&thread, NULL, thread_function, &thread_id) != 0) {
        fprintf(stderr, "Error creating thread\n");
        return 1;
    }

    printf("Main thread is waiting for the created thread to finish...\n");

    // Wait for the created thread to finish
    if (pthread_join(thread, NULL) != 0) {
        fprintf(stderr, "Error joining thread\n");
        return 1;
    }

    printf("Created thread has finished\n");

    return 0;
}
#include <stdio.h>
#include <pthread.h>

void *thread_function(void *arg) {
    printf("Thread is running\n");
    pthread_exit(NULL);
}

int main() {
    pthread_t thread;

    // Create a thread
    if (pthread_create(&thread, NULL, thread_function, NULL) != 0) {
        fprintf(stderr, "Error creating thread\n");
        return 1;
    }

    printf("Main thread is waiting for the created thread to finish...\n");

    // Wait for the created thread to finish
    if (pthread_join(thread, NULL) != 0) {
        fprintf(stderr, "Error joining thread\n");
        return 1;
    }

    printf("Created thread has finished\n");

    return 0;
}
#include <stdio.h>
#include <pthread.h>

void *thread_function(void *arg) {
    if (pthread_equal(pthread_self(), *((pthread_t *)arg))) {
        printf("Thread is equal to the passed thread ID\n");
    } else {
        printf("Thread is not equal to the passed thread ID\n");
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread;

    // Create a thread
    if (pthread_create(&thread, NULL, thread_function, &thread) != 0) {
        fprintf(stderr, "Error creating thread\n");
        return 1;
    }

    // Wait for the created thread to finish
    if (pthread_join(thread, NULL) != 0) {
        fprintf(stderr, "Error joining thread\n");
        return 1;
    }

    return 0;
}
#include <stdio.h>
#include <pthread.h>

void *thread_function(void *arg) {
    if (pthread_equal(pthread_self(), *((pthread_t *)arg))) {
        printf("Thread is equal to the passed thread ID\n");
    } else {
        printf("Thread is not equal to the passed thread ID\n");
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread;

    // Create a thread
    if (pthread_create(&thread, NULL, thread_function, &thread) != 0) {
        fprintf(stderr, "Error creating thread\n");
        return 1;
    }

    // Wait for the created thread to finish
    if (pthread_join(thread, NULL) != 0) {
        fprintf(stderr, "Error joining thread\n");
        return 1;
    }

    return 0;
}
