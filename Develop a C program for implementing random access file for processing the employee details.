#include <stdio.h>
#include <stdlib.h>

// Structure to represent employee details
struct Employee {
    int empId;
    char empName[50];
    float empSalary;
};

// Function declarations
void addEmployee(FILE *file);
void displayEmployees(FILE *file);
void updateEmployee(FILE *file, int empId);

int main() {
    FILE *employeeFile;

    // Open the file in binary mode for random access
    employeeFile = fopen("employee_data.dat", "rb+");

    // If the file doesn't exist, create a new one
    if (employeeFile == NULL) {
        employeeFile = fopen("employee_data.dat", "wb+");
    }

    if (employeeFile == NULL) {
        perror("Error opening the file");
        exit(EXIT_FAILURE);
    }

    int choice;
    do {
        printf("\nEmployee Record System\n");
        printf("1. Add Employee\n");
        printf("2. Display Employees\n");
        printf("3. Update Employee\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addEmployee(employeeFile);
                break;
            case 2:
                displayEmployees(employeeFile);
                break;
            case 3:
                {
                    int empId;
                    printf("Enter the employee ID to update: ");
                    scanf("%d", &empId);
                    updateEmployee(employeeFile, empId);
                }
                break;
            case 4:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 4);

    // Close the file
    fclose(employeeFile);

    return 0;
}

void addEmployee(FILE *file) {
    struct Employee emp;

    // Move the file pointer to the end for appending
    fseek(file, 0, SEEK_END);

    printf("Enter Employee ID: ");
    scanf("%d", &emp.empId);

    printf("Enter Employee Name: ");
    scanf("%s", emp.empName);

    printf("Enter Employee Salary: ");
    scanf("%f", &emp.empSalary);

    // Write the employee structure to the file
    fwrite(&emp, sizeof(struct Employee), 1, file);

    printf("Employee added successfully.\n");
}

void displayEmployees(FILE *file) {
    struct Employee emp;

    // Move the file pointer to the beginning
    fseek(file, 0, SEEK_SET);

    printf("\nEmployee Details:\n");
    printf("%-10s %-20s %-15s\n", "Employee ID", "Employee Name", "Employee Salary");

    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        printf("%-10d %-20s %-15.2f\n", emp.empId, emp.empName, emp.empSalary);
    }
}

void updateEmployee(FILE *file, int empId) {
    struct Employee emp;
    int found = 0;

    // Move the file pointer to the beginning
    fseek(file, 0, SEEK_SET);

    while (fread(&emp, sizeof(struct Employee), 1, file) == 1) {
        if (emp.empId == empId) {
            found = 1;

            printf("\nCurrent Details for Employee ID %d:\n", empId);
            printf("%-10s %-20s %-15s\n", "Employee ID", "Employee Name", "Employee Salary");
            printf("%-10d %-20s %-15.2f\n", emp.empId, emp.empName, emp.empSalary);

            printf("\nEnter new details:\n");
            printf("Enter Employee Name: ");
            scanf("%s", emp.empName);

            printf("Enter Employee Salary: ");
            scanf("%f", &emp.empSalary);

            // Move the file pointer back to the record to update
            fseek(file, -sizeof(struct Employee), SEEK_CUR);

            // Write the updated employee structure to the file
            fwrite(&emp, sizeof(struct Employee), 1, file);

            printf("Employee details updated successfully.\n");
            break;
        }
    }

    if (!found) {
        printf("Employee with ID %d not found.\n", empId);
    }
}
