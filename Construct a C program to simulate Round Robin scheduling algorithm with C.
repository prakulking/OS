#include <stdio.h>

// Process structure
struct Process {
    int id;             // Process ID
    int burst_time;     // Burst time of the process
    int remaining_time; // Remaining burst time for the process
};

// Function to perform the Round Robin scheduling
void roundRobin(struct Process proc[], int n, int time_quantum) {
    int remaining_processes = n;
    int time = 0;

    // Simulate until all processes are executed
    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            // Skip processes that are already completed
            if (proc[i].remaining_time <= 0) {
                continue;
            }

            // Execute the process for the time quantum or its remaining time, whichever is smaller
            int execute_time = (proc[i].remaining_time < time_quantum) ? proc[i].remaining_time : time_quantum;
            proc[i].remaining_time -= execute_time;

            // Update the total time
            time += execute_time;

            // Print the execution details
            printf("Time %d: Process P%d executed for %d units. Remaining time: %d\n", time, proc[i].id, execute_time, proc[i].remaining_time);

            // Check if the process is completed
            if (proc[i].remaining_time <= 0) {
                remaining_processes--;
            }
        }
    }
}

int main() {
    int n, time_quantum;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input time quantum
    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);

    struct Process proc[n];

    // Input burst times of processes
    for (int i = 0; i < n; i++) {
        proc[i].id = i + 1;
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &proc[i].burst_time);
        proc[i].remaining_time = proc[i].burst_time;
    }

    // Perform Round Robin scheduling
    roundRobin(proc, n, time_quantum);

    return 0;
}
