#include <stdio.h>

struct Process {
    int process_id;
    int arrival_time;
    int burst_time;
};

void calculateWaitingTime(struct Process processes[], int n, int waiting_time[]) {
    waiting_time[0] = 0;

    for (int i = 1; i < n; i++) {
        waiting_time[i] = waiting_time[i - 1] + processes[i - 1].burst_time;
    }
}

void calculateTurnaroundTime(struct Process processes[], int n, int waiting_time[], int turnaround_time[]) {
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = waiting_time[i] + processes[i].burst_time;
    }
}

void calculateAverageTimes(struct Process processes[], int n) {
    int waiting_time[n], turnaround_time[n];
    double total_waiting_time = 0, total_turnaround_time = 0;

    calculateWaitingTime(processes, n, waiting_time);
    calculateTurnaroundTime(processes, n, waiting_time, turnaround_time);

    printf("\nProcess\t Arrival Time\t Burst Time\t Waiting Time\t Turnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t %d\t\t %d\t\t %d\t\t %d\n",
               processes[i].process_id,
               processes[i].arrival_time,
               processes[i].burst_time,
               waiting_time[i],
               turnaround_time[i]);

        total_waiting_time += waiting_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    double average_waiting_time = total_waiting_time / n;
    double average_turnaround_time = total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2lf\n", average_waiting_time);
    printf("Average Turnaround Time: %.2lf\n", average_turnaround_time);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        processes[i].arrival_time = 0; // All processes activated at time 0
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    // Calculate and display average waiting time and turnaround time
    calculateAverageTimes(processes, n);

    return 0;
}
