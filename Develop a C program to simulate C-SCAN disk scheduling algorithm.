#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 100

void cScan(int requests[], int numRequests, int initialPosition, int maxCylinder) {
    int totalHeadMovement = 0;
    int currentHeadPosition = initialPosition;

    printf("Sequence of head movement:\n");

    while (1) {
        int nextRequest = -1;

        // Find the next request in the current direction
        for (int i = 0; i < numRequests; i++) {
            if (requests[i] >= 0 && requests[i] <= maxCylinder) {
                if (requests[i] >= currentHeadPosition) {
                    if (nextRequest == -1 || requests[i] < nextRequest) {
                        nextRequest = requests[i];
                    }
                }
            }
        }

        if (nextRequest == -1) {
            // No more requests in the current direction, move to the lowest cylinder
            totalHeadMovement += maxCylinder - currentHeadPosition;
            printf("Move from %d to %d (Distance: %d)\n", currentHeadPosition, maxCylinder, maxCylinder - currentHeadPosition);
            currentHeadPosition = 0;  // Move to the lowest cylinder

            // Move to the highest cylinder in the same direction
            totalHeadMovement += maxCylinder;
            printf("Move from %d to %d (Distance: %d)\n", 0, maxCylinder, maxCylinder);
        } else {
            // Move to the next request
            int distance = abs(nextRequest - currentHeadPosition);
            totalHeadMovement += distance;
            printf("Move from %d to %d (Distance: %d)\n", currentHeadPosition, nextRequest, distance);

            // Mark the request as serviced
            for (int i = 0; i < numRequests; i++) {
                if (requests[i] == nextRequest) {
                    requests[i] = -1;
                    break;
                }
            }

            currentHeadPosition = nextRequest;
        }

        // Check if all requests have been serviced
        int allServiced = 1;
        for (int i = 0; i < numRequests; i++) {
            if (requests[i] >= 0 && requests[i] <= maxCylinder) {
                allServiced = 0;
                break;
            }
        }

        if (allServiced) {
            break;
        }
    }

    printf("\nTotal Head Movement: %d\n", totalHeadMovement);
}

int main() {
    int requests[MAX_REQUESTS];
    int numRequests, initialPosition, maxCylinder;

    printf("Enter the number of disk requests: ");
    scanf("%d", &numRequests);

    if (numRequests > MAX_REQUESTS) {
        fprintf(stderr, "Exceeded maximum number of requests\n");
        return 1;
    }

    printf("Enter the initial head position: ");
    scanf("%d", &initialPosition);

    printf("Enter the maximum cylinder number: ");
    scanf("%d", &maxCylinder);

    printf("Enter the disk requests:\n");
    for (int i = 0; i < numRequests; i++) {
        printf("Request %d: ", i + 1);
        scanf("%d", &requests[i]);
    }

    // Simulate C-SCAN disk scheduling
    cScan(requests, numRequests, initialPosition, maxCylinder);

    return 0;
}
