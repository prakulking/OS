#include <stdio.h>

struct Process {
    int id;
    int burst_time;
};

void swap(struct Process *xp, struct Process *yp) {
    struct Process temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sortProcesses(struct Process proc[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (proc[j].burst_time > proc[j+1].burst_time) {
                swap(&proc[j], &proc[j+1]);
            }
        }
    }
}

void findWaitingTime(struct Process proc[], int n, int wt[]) {
    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = proc[i-1].burst_time + wt[i-1];
    }
}

void findTurnaroundTime(struct Process proc[], int n, int wt[], int tat[]) {
    for (int i = 0; i < n; i++) {
        tat[i] = proc[i].burst_time + wt[i];
    }
}

void findAverageTime(struct Process proc[], int n) {
    int wt[n], tat[n];

    // Find waiting time of all processes
    findWaitingTime(proc, n, wt);

    // Find turnaround time for all processes
    findTurnaroundTime(proc, n, wt, tat);

    // Calculate average waiting time and average turnaround time
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
    }

    printf("Average Waiting Time: %.2f\n", total_wt / n);
    printf("Average Turnaround Time: %.2f\n", total_tat / n);
}

void displayGanttChart(struct Process proc[], int n) {
    printf("\nGantt Chart:\n");
    for (int i = 0; i < n; i++) {
        printf("| P%d ", proc[i].id);
    }
    printf("|\n");

    // Display the timeline
    printf("0");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < proc[i].burst_time; j++) {
            printf(" ");
        }
        printf("%2d", wt[i] + tat[i]);
    }
    printf("\n");
}

int main() {
    int n;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process proc[n];

    // Input burst times of processes
    for (int i = 0; i < n; i++) {
        proc[i].id = i+1;
        printf("Enter burst time for process P%d: ", i+1);
        scanf("%d", &proc[i].burst_time);
    }

    // Sort processes based on burst time
    sortProcesses(proc, n);

    // Display Gantt Chart
    displayGanttChart(proc, n);

    // Find and display average waiting time and average turnaround time
    findAverageTime(proc, n);

    return 0;
}
